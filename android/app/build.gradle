apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.mendix.nativetemplate"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        missingDimensionStrategy "react-native-camera", "general"
        versionCode 1
        versionName "1.0"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        tasks.create(name: "bundle${variant.name.capitalize()}JsAndAssets") {}

        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    dataBinding {
        enabled true
    }
    packagingOptions {
        pickFirst '**/libjsc.so'
        pickFirst '**/libc++_shared.so'
    }
}

project.ext.vectoricons = [
    // Intentionally left blank
    iconFontNames: []
]

dependencies {
    implementation project(":react-native-gesture-handler")
    implementation project(":react-native-webview")
    implementation project(":react-native-view-shot")
    implementation project(":react-native-video")
    implementation project(":react-native-vector-icons")
    implementation project(":react-native-touch-id")
    implementation project(":react-native-svg")
    implementation project(":react-native-sqlite-storage")
    implementation project(":react-native-sound")
    implementation project(":react-native-maps")
    implementation project(":react-native-inappbrowser-reborn")
    implementation project(":react-native-image-picker")
    implementation project(":react-native-geocoder")
    implementation project(":react-native-firebase")
    implementation project(":react-native-device-info")
    implementation project(":react-native-camera")
    implementation project(":react-native-calendar-events")
    implementation project(":react-native-ble-plx")
    implementation project(":@react-native-community_netinfo")
    implementation project(":@react-native-community_async-storage")
    implementation project(":mendixnative-release")
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation "org.webkit:android-jsc:r245459"
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into "libs"
}

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
