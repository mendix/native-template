apply plugin: "com.android.application"
apply plugin: "kotlin-android"

import com.android.build.OutputFile

project.ext.react = [
        bundleForVariant: { def variant -> false },
        enableHermes : false  // clean and rebuild if changing
]

apply from: file("../../node_modules/react-native/react.gradle")

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = "org.webkit:android-jsc-intl:+"`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = "org.webkit:android-jsc:+"

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    // We use NDK 23 which has both M1 support and is the side-by-side NDK version from AGP.
    ndkVersion = "23.1.7779620"

    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    namespace "com.mendix.nativetemplate"
    defaultConfig {
        applicationId "com.mendix.nativetemplate"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        missingDimensionStrategy "react-native-camera", "general"
        versionCode 1
        versionName "1.0"
        testBuildType System.getProperty("testBuildType", "debug")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resValue "string", "CODE_PUSH_APK_BUILD_TIME", String.format("\"%d\"", System.currentTimeMillis())
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    flavorDimensions "mode"
    productFlavors {
        appstore {
            dimension "mode"
        }
        dev {
            dimension "mode"
            applicationIdSuffix ".developerapp"
            versionNameSuffix "-developerApp"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    buildFeatures {
        viewBinding true
    }
    packagingOptions {
        pickFirst "**/libjsc.so"
        pickFirst "**/libc++_shared.so"
    }
}

dependencies {
    implementation "androidx.core:core-ktx:1.3.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation "com.facebook.react:react-native:+"  // From node_modules

    // Flipper debugger
    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") {
        exclude group: "com.facebook.fbjni"
    }
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group: "com.facebook.flipper"
        exclude group: "com.squareup.okhttp3", module: "okhttp"
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group: "com.facebook.flipper"
    }

    // Javascript engine
    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        implementation files(hermesPath + "hermes-debug.aar")
    } else {
        implementation jscFlavor
    }

    implementation project(":react-native-splash-screen")
    implementation project(":react-native-code-push")
    implementation project(":mendixnative-release")
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.webkit:android-jsc:r245459"

    // Explicit add okhttp
    implementation("com.squareup.okhttp3:okhttp:4.9.1")
    implementation("com.squareup.okhttp3:okhttp-urlconnection:4.9.1")

    // Required by MendixNative
    implementation("com.fasterxml.jackson.core:jackson-core:2.11.3")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.11.3")
    implementation("com.fasterxml.jackson.core:jackson-annotations:2.11.3")
    implementation "androidx.security:security-crypto:1.1.0-alpha03"

    // Required for Custom Dev Apps
    devImplementation "androidx.constraintlayout:constraintlayout:2.0.4"
    devImplementation "me.dm7.barcodescanner:zxing:1.9.8"

    androidTestImplementation("com.wix:detox:+")  { transitive = true }
    androidTestImplementation "junit:junit:4.12"
}

configurations.all {
    resolutionStrategy {
        force "androidx.annotation:annotation:1.1.0"
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into "libs"
}

apply from: file("../../node_modules/@mendix/native/android/mendix.gradle"); applyMendixGradle(project)
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
