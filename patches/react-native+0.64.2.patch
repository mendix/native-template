diff --git a/node_modules/react-native/Libraries/Image/RCTUIImageViewAnimated.m b/node_modules/react-native/Libraries/Image/RCTUIImageViewAnimated.m
index 4ab9940..2a2b830 100644
--- a/node_modules/react-native/Libraries/Image/RCTUIImageViewAnimated.m
+++ b/node_modules/react-native/Libraries/Image/RCTUIImageViewAnimated.m
@@ -276,6 +276,10 @@ - (void)displayDidRefresh:(CADisplayLink *)displayLink
 
 - (void)displayLayer:(CALayer *)layer
 {
+  if (!_currentFrame) {
+    _currentFrame = self.image;
+  }
+
   if (_currentFrame) {
     layer.contentsScale = self.animatedImageScale;
     layer.contents = (__bridge id)_currentFrame.CGImage;
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/Arguments.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/Arguments.java
index 6302abe..bd6a094 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/Arguments.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/bridge/Arguments.java
@@ -9,6 +9,7 @@ package com.facebook.react.bridge;
 
 import android.os.Bundle;
 import android.os.Parcelable;
+import android.util.Log;
 import androidx.annotation.Nullable;
 import java.lang.reflect.Array;
 import java.util.AbstractList;
@@ -17,6 +18,8 @@ import java.util.List;
 import java.util.Map;
 
 public class Arguments {
+  private static final String TAG = "ReactNative.Arguments";
+
   private static Object makeNativeObject(Object object) {
     if (object == null) {
       return null;
@@ -68,7 +71,7 @@ public class Arguments {
       } else if (elem instanceof WritableNativeMap) {
         nativeArray.pushMap((WritableNativeMap) elem);
       } else {
-        throw new IllegalArgumentException("Could not convert " + elem.getClass());
+        Log.e(TAG, "makeNativeArray: Could not convert: " + elem.getClass());
       }
     }
     return nativeArray;
@@ -113,7 +116,7 @@ public class Arguments {
     } else if (value instanceof WritableNativeMap) {
       nativeMap.putMap(key, (WritableNativeMap) value);
     } else {
-      throw new IllegalArgumentException("Could not convert " + value.getClass());
+      Log.e(TAG, "addEntry: Could not convert: " + value.getClass());
     }
   }
 
@@ -180,7 +183,7 @@ public class Arguments {
       } else if (argumentClass == WritableNativeArray.class) {
         arguments.pushArray((WritableNativeArray) argument);
       } else {
-        throw new RuntimeException("Cannot convert argument of type " + argumentClass);
+        Log.e(TAG, "fromJavaArgs: Cannot convert argument of type: " + argumentClass);
       }
     }
     return arguments;
@@ -225,11 +228,11 @@ public class Arguments {
         if (v instanceof Bundle) {
           catalystArray.pushMap(fromBundle((Bundle) v));
         } else {
-          throw new IllegalArgumentException("Unexpected array member type " + v.getClass());
+          Log.e(TAG, "fromArray: Unexpected array member type: " + v.getClass());
         }
       }
     } else {
-      throw new IllegalArgumentException("Unknown array type " + array.getClass());
+      Log.e(TAG, "fromArray: Unknown array type: " + array.getClass());
     }
     return catalystArray;
   }
@@ -264,7 +267,7 @@ public class Arguments {
       } else if (obj instanceof Boolean) {
         catalystArray.pushBoolean((Boolean) obj);
       } else {
-        throw new IllegalArgumentException("Unknown value type " + obj.getClass());
+        Log.e(TAG, "fromArray: Unknown value type: " + obj.getClass());
       }
     }
     return catalystArray;
@@ -309,7 +312,7 @@ public class Arguments {
       } else if (value instanceof List) {
         map.putArray(key, fromList((List) value));
       } else {
-        throw new IllegalArgumentException("Could not convert " + value.getClass());
+        Log.e(TAG, "fromBundle: Could not convert: " + value.getClass());
       }
     }
     return map;
@@ -357,7 +360,7 @@ public class Arguments {
           list.add(toList(readableArray.getArray(i)));
           break;
         default:
-          throw new IllegalArgumentException("Could not convert object in array.");
+          Log.e(TAG, "toList: Could not convert object in array.");
       }
     }
 
@@ -404,7 +407,7 @@ public class Arguments {
           bundle.putSerializable(key, toList(readableMap.getArray(key)));
           break;
         default:
-          throw new IllegalArgumentException("Could not convert object with key: " + key + ".");
+          Log.e(TAG, "toBundle: Could not convert object with key: " + key + ".");
       }
     }
 
diff --git a/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.cpp b/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.cpp
index 97e6407..80a6c22 100644
--- a/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.cpp
+++ b/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.cpp
@@ -3047,7 +3047,7 @@ static void YGNodelayoutImpl(
     }
 
     node->setLayoutHadOverflow(
-        node->getLayout().hadOverflow() |
+        node->getLayout().hadOverflow() ||
         (collectedFlexItemsValues.remainingFreeSpace < 0));
 
     // STEP 6: MAIN-AXIS JUSTIFICATION & CROSS-AXIS SIZE DETERMINATION
