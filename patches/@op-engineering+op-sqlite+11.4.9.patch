diff --git a/node_modules/@op-engineering/op-sqlite/android/build.gradle b/node_modules/@op-engineering/op-sqlite/android/build.gradle
index 70ebca0..5da8659 100644
--- a/node_modules/@op-engineering/op-sqlite/android/build.gradle
+++ b/node_modules/@op-engineering/op-sqlite/android/build.gradle
@@ -1,5 +1,4 @@
 import java.nio.file.Paths
-import groovy.json.JsonSlurper
 
 buildscript {
   repositories {
@@ -27,10 +26,10 @@ def isNewArchitectureEnabled() {
   return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
 }
 
-def useSQLCipher = false
+def useSQLCipher = true
 def useLibsql = false
 def useCRSQLite = false
-def performanceMode = false
+def performanceMode = true
 def sqliteFlags = ""
 def enableFTS5 = false
 def useSqliteVec = false
@@ -38,28 +37,6 @@ def enableRtree = false
 def tokenizers = []
 
 def isInsideNodeModules = rootDir.absolutePath.contains("node_modules")
-def packageJson
-
-if ( isInsideNodeModules ) {
-  def packageJsonFile = new File("$rootDir/../../../package.json")
-  packageJson = new JsonSlurper().parseText(packageJsonFile.text)
-} else {
-  def packageJsonFile = new File("$rootDir/../package.json")
-  packageJson = new JsonSlurper().parseText(packageJsonFile.text)
-}
-
-def opsqliteConfig = packageJson["op-sqlite"]
-if(opsqliteConfig) {
-  useSQLCipher = opsqliteConfig["sqlcipher"]
-  useCRSQLite = opsqliteConfig["crsqlite"]
-  useSqliteVec = opsqliteConfig["sqliteVec"]
-  performanceMode = opsqliteConfig["performanceMode"]
-  sqliteFlags = opsqliteConfig["sqliteFlags"] ? opsqliteConfig["sqliteFlags"] : ""
-  enableFTS5 = opsqliteConfig["fts5"]
-  useLibsql = opsqliteConfig["libsql"]
-  enableRtree = opsqliteConfig["rtree"]
-  tokenizers = opsqliteConfig["tokenizers"] ? opsqliteConfig["tokenizers"] : []
-}
 
 if(useSQLCipher) {
   println "[OP-SQLITE] using SQLCipher ðŸ”’"
diff --git a/node_modules/@op-engineering/op-sqlite/cpp/bindings.cpp b/node_modules/@op-engineering/op-sqlite/cpp/bindings.cpp
index 3af52b2..405d191 100644
--- a/node_modules/@op-engineering/op-sqlite/cpp/bindings.cpp
+++ b/node_modules/@op-engineering/op-sqlite/cpp/bindings.cpp
@@ -62,12 +62,6 @@ void install(jsi::Runtime &rt,
                 options.getProperty(rt, "encryptionKey").asString(rt).utf8(rt);
         }
 
-#ifdef OP_SQLITE_USE_SQLCIPHER
-        if (encryption_key.empty()) {
-            log_to_console(rt, "Encryption key is missing for SQLCipher");
-        }
-#endif
-
         if (!location.empty()) {
             if (location == ":memory:") {
                 path = ":memory:";
diff --git a/node_modules/@op-engineering/op-sqlite/op-sqlite.podspec b/node_modules/@op-engineering/op-sqlite/op-sqlite.podspec
index b8568b9..f547bc0 100644
--- a/node_modules/@op-engineering/op-sqlite/op-sqlite.podspec
+++ b/node_modules/@op-engineering/op-sqlite/op-sqlite.podspec
@@ -11,20 +11,11 @@ folly_compiler_flags = '-DFOLLY_NO_CONFIG -DFOLLY_MOBILE=1 -DFOLLY_USE_LIBCPP=1
 fabric_enabled = ENV['RCT_NEW_ARCH_ENABLED'] == '1'
 
 parent_folder_name = File.basename(__dir__)
-app_package = nil
-# When installed on user node_modules lives inside node_modules/@op-engineering/op-sqlite
-if is_user_app
-  app_package = JSON.parse(File.read(File.join(__dir__, "..", "..", "..", "package.json")))
-# When running on the example app
-else
-  app_package = JSON.parse(File.read(File.join(__dir__, "example", "package.json")))
-end
 
-op_sqlite_config = app_package["op-sqlite"]
-use_sqlcipher = false
+use_sqlcipher = true
 use_crsqlite = false
 use_libsql = false
-performance_mode = false
+performance_mode = true
 phone_version = false
 sqlite_flags = ""
 fts5 = false
@@ -32,19 +23,6 @@ rtree = false
 use_sqlite_vec = false
 tokenizers = []
 
-if(op_sqlite_config != nil)
-  use_sqlcipher = op_sqlite_config["sqlcipher"] == true
-  use_crsqlite = op_sqlite_config["crsqlite"] == true
-  use_libsql = op_sqlite_config["libsql"] == true
-  performance_mode = op_sqlite_config["performanceMode"] || false
-  phone_version = op_sqlite_config["iosSqlite"] == true
-  sqlite_flags = op_sqlite_config["sqliteFlags"] || ""
-  fts5 = op_sqlite_config["fts5"] == true
-  rtree = op_sqlite_config["rtree"] == true
-  use_sqlite_vec = op_sqlite_config["sqliteVec"] == true
-  tokenizers = op_sqlite_config["tokenizers"] || []
-end
-
 if phone_version then
   if use_sqlcipher then
     raise "SQLCipher is not supported with phone version"
